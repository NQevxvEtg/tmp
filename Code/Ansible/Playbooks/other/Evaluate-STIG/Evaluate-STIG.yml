- name: Identify reachable hosts
  hosts: all
  become: true  
  gather_facts: false
  strategy: linear
  vars_files:
    - ../../vaults/vbox_vault.yml
  vars:
    ansible_become_password: "{{ remote_host_become_pass }}" 
    ansible_remote_tmp: /var/ansible_tmp

  tasks:
    - block:
        - name: Quick check for SSH connection readiness
          ansible.builtin.wait_for_connection:
            timeout: 5 # Fail fast if no SSH connection
          delegate_to: "{{ inventory_hostname }}" # Ensure this runs against the target host

        - name: Add device to general 'reachable' group
          ansible.builtin.group_by:
            key: "reachable"
            # No need for ansible_hostname here for the general group, it's just 'reachable'

      rescue:
        - name: Mark unreachable host
          ansible.builtin.debug:
            msg: "Host {{ inventory_hostname }} is unreachable within the initial check. Skipping."
          # No need to create a group for unreachable. The absence from 'reachable' implies unreachability.

- name: Run Evaluate-STIG
  ignore_unreachable: yes
  hosts: reachable
  become: true
  vars_files:
    - ../../vaults/vbox_vault.yml  
  vars:
    ansible_become_password: "{{ remote_host_become_pass }}"
    ansible_remote_tmp: /var/ansible_tmp
    output: CombinedCKL,CKLB
    import_path: "{{ playbook_dir }}/../../files/evaluate-stig-output"
    remote_stig_base_dir: /var/ansible_tmp/Evaluate-STIG
    export_path: /opt/STIG_Compliance

  tasks:
    - name: Get primary group of the playbook runner
      delegate_to: localhost
      ansible.builtin.command: id -gn {{ lookup('env', 'USER') }}
      register: primary_group
      changed_when: false
      become: false

    - name: Ensure STIG output directory exists on remote host
      ansible.builtin.file:
        path: "{{ export_path }}"
        state: directory
        mode: '0755'

    - name: Extract Evaluate-STIG archive on remote host
      ansible.builtin.unarchive:
        src: "{{ playbook_dir }}/../../files/Evaluate-STIG.zip"
        dest: "{{ ansible_remote_tmp }}"

    - name: Execute Evaluate-STIG
      ansible.builtin.command: >
        bash {{ remote_stig_base_dir }}/Evaluate-STIG_Bash.sh --Output {{ output }}
      register: start_scan_result # Register the result to get the async job ID and path
      async: 3600  # Max 60 minutes for the operation
      poll: 0      # Crucial: Do not poll here, just start the job and return control

    - name: Poll for Evaluate-STIG scan
      ansible.builtin.async_status:
        jid: "{{ start_scan_result.ansible_job_id }}" # Use the job ID from the previous task
        mode: status
      register: evaluate_scan_result # Register the final result of the async operation
      until: evaluate_scan_result.finished # Loop until the job is finished
      delay: 15 # Check status every 15 seconds
      retries: 240 # Retry 240 times = 60 minutes (15s * 240 = 3600s)

    - name: Archive Evaluate-STIG Results
      ansible.builtin.archive:
        path: "{{ export_path }}/{{ ansible_hostname | upper }}"
        dest: "{{ export_path }}/{{ ansible_hostname | upper }}.zip"
        format: zip

    - name: Clear existing results directory on control node
      ansible.builtin.file:
        path: "{{ import_path }}/{{ ansible_hostname | upper }}"
        state: absent
      delegate_to: localhost
      vars:
        ansible_become_password: "{{ controller_become_pass }}"

    - name: Fetch Evaluate-STIG Results archive from remote host
      ansible.builtin.fetch:
        src: "{{ export_path }}/{{ ansible_hostname | upper }}.zip"
        dest: "{{ import_path }}/"
        flat: yes

    - name: Process Evaluate-STIG Results on control node
      block:
        - name: Extract Evaluate-STIG Results archive on control node
          ansible.builtin.unarchive:
            src: "{{ import_path }}/{{ ansible_hostname | upper }}.zip"
            dest: "{{ import_path }}"
            owner: "{{ lookup('env', 'USER') }}"
            group: "{{ primary_group.stdout }}"
          delegate_to: localhost
          vars:
            ansible_become_password: "{{ controller_become_pass }}"

        - name: Delete Evaluate-STIG Results archive on control node
          ansible.builtin.file:
            path: "{{ import_path }}/{{ ansible_hostname | upper }}.zip"
            state: absent
          delegate_to: localhost
          vars:
            ansible_become_password: "{{ controller_become_pass }}"

    - name: Fix ownership of the fetched directory on control node
      ansible.builtin.file:
        path: "{{ import_path }}/{{ ansible_hostname | upper }}"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ primary_group.stdout }}"
        recurse: yes
        state: directory
      delegate_to: localhost
      vars:
        ansible_become_password: "{{ controller_become_pass }}"

    - name: Clean up Evaluate-STIG on remote host
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ remote_stig_base_dir }}"
        - "{{ export_path }}/{{ ansible_hostname | upper }}"
        - "{{ export_path }}/{{ ansible_hostname | upper }}.zip"