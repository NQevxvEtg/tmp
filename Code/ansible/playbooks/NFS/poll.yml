---
- name: Poll Live NFS Mount Usage and Bandwidth
  hosts: all
  become: true
  gather_facts: true  # Required for ansible_play_hosts and hostvars
  vars_files:
    - ../../vaults/vbox_vault.yml
  vars:
    ansible_become_password: "{{ remote_host_become_pass }}"
    ansible_remote_tmp: /var/ansible_tmp
    slow_mount: "/mnt/your_slow_mount"  # Update path
    output_file: "{{ playbook_dir }}/../../files/mount_usage_report.txt"

  tasks:
    - name: Get user/process counts (fast via fuser)
      shell: >
        fuser -v {{ slow_mount }} | awk 'NR>2 {print $1, $2, $NF}' | sort | uniq -c | sort -nr | head -10 || echo 'No active users'
      register: users_out
      ignore_errors: yes
      changed_when: false
      check_mode: false

    - name: Get I/O data (formatted bytes via embedded script for top processes)
      shell: |
        #!/bin/bash
        # Full script for formatting PID I/O in human-readable units (MiB/KiB/GiB).
        # Uses numfmt (from util-linux) if available; else awk calculation.
        #
        mount="{{ slow_mount }}"
        pids=$(fuser -m "$mount" 2>/dev/null)
        for pid in $pids; do
          if [ -d "/proc/$pid" ]; then
            comm_full=$(ps -p $pid -o args= | tr '\n' ' ')
            comm_truncated=$(echo "$comm_full" | cut -c1-120)  # Truncate to prevent overly long lines
            rchar=$(grep 'rchar' "/proc/$pid/io" 2>/dev/null | awk -F: '{print $2}')
            wchar=$(grep 'wchar' "/proc/$pid/io" 2>/dev/null | awk -F: '{print $2}')
            
            # Function to format bytes (with fallback to raw)
            format_bytes() {
              bytes=$1
              if [ "$bytes" -eq 0 ]; then
                echo "$bytes B"
              elif command -v numfmt >/dev/null 2>&1; then
                # Preferred: Use numfmt for accurate MiB/KiB/etc.
                numfmt --to=iec-i --suffix=B "$bytes"
              else
                # Fallback: Simple awk division for readable units
                awk -v b="$bytes" 'BEGIN {
                  if (b >= 1073741824) { printf "%.1f GiB", b / 1073741824 }
                  else if (b >= 1048576) { printf "%.1f MiB", b / 1048576 }
                  else if (b >= 1024) { printf "%.1f KiB", b / 1024 }
                  else { printf "%.0f B", b }
                }'
              fi
            }
            
            # Output only if non-zero
            if [ "$rchar" -ne 0 ]; then
              formatted_rchar=$(format_bytes "$rchar")
              echo "PID $pid ($comm_truncated): rchar $formatted_rchar"
            fi
            if [ "$wchar" -ne 0 ]; then
              formatted_wchar=$(format_bytes "$wchar")
              echo "PID $pid ($comm_truncated): wchar $formatted_wchar"
            fi
          fi
        done | head -10
      register: io_out
      ignore_errors: yes
      changed_when: false
      check_mode: false

    - name: Get total mount I/O
      shell: >
        iostat -dx 1 2 | grep -oP "{{ slow_mount | basename }}.*" | tail -1
      register: iostat_out
      ignore_errors: yes
      changed_when: false
      check_mode: false

    - name: Get primary group of the playbook runner (for file permissions)
      delegate_to: localhost
      ansible.builtin.command: id -gn {{ lookup('env', 'USER') }}
      register: primary_group

    - name: Generate and write a single combined report for all hosts with usage data
      delegate_to: localhost
      run_once: true
      ansible.builtin.copy:
        content: |
          # Combined NFS Mount Usage and Bandwidth Report
          # Generated at: {{ ansible_date_time.iso8601 }}
          # -------------------------------------------------------------
          # This report only includes servers with active NFS mount usage or I/O data.
          
          {% for host in ansible_play_hosts %}
          {%- set users_results = hostvars[host].get('users_out') -%}
          {%- set io_results = hostvars[host].get('io_out') -%}
          {%- set bw_results = hostvars[host].get('iostat_out') -%}
          
          {% if (users_results and users_results.stdout_lines and 'No active users' not in users_results.stdout_lines) or
                (io_results and io_results.stdout_lines) or
                (bw_results and bw_results.stdout_lines) %}
          
          ---
          # Report for: {{ host }}
          ---
          
          {% if users_results and users_results.stdout_lines and 'No active users' not in users_results.stdout_lines %}
          # Active Users/Processes:
          {% for line in users_results.stdout_lines %}
          - {{ line }}
          {% endfor %}
          {% else %}
          # No active users detected.
          {% endif %}
          
          {% if io_results and io_results.stdout_lines %}
          # Process I/O Data (formatted bytes):
          {% for io_line in io_results.stdout_lines %}
          - {{ io_line }}
          {% endfor %}
          {% else %}
          # No I/O data available.
          {% endif %}
          
          {% if bw_results and bw_results.stdout_lines %}
          # Total Mount Bandwidth (rMB/s wMB/s %util):
          {% for line in bw_results.stdout_lines %}
          - {{ line }}
          {% endfor %}
          {% else %}
          # No bandwidth data.
          {% endif %}
          
          {% endif %}
          {% endfor %}
        dest: "{{ output_file }}"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ primary_group.stdout }}"
        mode: '0644'