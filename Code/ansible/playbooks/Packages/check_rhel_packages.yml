- name: Check RHEL package versions
  ignore_unreachable: yes
  hosts: reachable
  become: true
  vars_files:
    - ../../vaults/vbox_vault.yml
  vars:
    ansible_become_password: "{{ remote_host_become_pass }}"
    ansible_remote_tmp: /var/ansible_tmp
    # Pass the raw lines directly to the shell script
    required_packages_raw: "{{ lookup('file', playbook_dir + '/../../files/package_versions.txt').splitlines() | map('trim') | reject('equalto', '') | list }}"
    output_file: "{{ playbook_dir }}/../../files/rhel_vulnerability_report.txt"

  tasks:
    - name: Get primary group for local file permissions
      delegate_to: localhost
      ansible.builtin.command: id -gn {{ lookup('env', 'USER') }}
      register: primary_group
      changed_when: false

    - name: Execute single-pass, optimized version check
      ansible.builtin.shell: |
        #!/bin/bash
        
        # Inject the raw required packages list as a multi-line string
        REQUIRED_RAW="
        {% for line in required_packages_raw %}
        {{ line }}
        {% endfor %}
        "
        
        REPORT_DATA=""
        HOST_NAME="{{ inventory_hostname }}"
        
        # Read the raw list line by line
        echo "$REQUIRED_RAW" | while IFS= read -r raw_entry; do
            if [[ -z "$raw_entry" ]]; then continue; fi

            # --- 1. Reliable Split using SED ---
            # Output format: PKG_PREFIX\nREQUIRED_EVR
            # PKG_PREFIX is everything up to the final hyphen preceding a digit.
            # REQUIRED_EVR is everything after that hyphen.
            
            # This sed command is designed to split the string into two groups based on the 
            # LAST occurrence of '-[0-9]...' and print them on separate lines.
            
            SPLIT_DATA=$(echo "$raw_entry" | sed -r 's/^(.*)-([0-9].*)$/\1\n\2/')
            
            # Check if sed successfully generated two lines
            if [[ $(echo "$SPLIT_DATA" | wc -l) -ne 2 ]]; then
                # Unable to parse this line, skip
                continue
            fi
            
            PKG_NAME_PREFIX=$(echo "$SPLIT_DATA" | head -n 1 | tr -d '\n')
            REQUIRED_EVR=$(echo "$SPLIT_DATA" | tail -n 1 | tr -d '\n')

            # --- 2. Determine Base Package Name ---
            # Remove version specifiers from prefixes like 'kernel-4.18.0'
            if [[ "$PKG_NAME_PREFIX" =~ -[0-9] ]]; then
                # Strip everything after the FIRST hyphen (e.g., 'kernel-4.18.0' -> 'kernel')
                PKG_NAME_BASE="${PKG_NAME_PREFIX%%-*}"
            else
                # Default: use the prefix (e.g., 'openssl' or 'libssh2-devel')
                PKG_NAME_BASE="$PKG_NAME_PREFIX"
            fi
            
            # --- 3. Query Installed Versions of the Base Package ---
            INSTALLED_EVRS=$(rpm -qa "$PKG_NAME_BASE" --queryformat '%{VERSION}-%{RELEASE}\n' 2>/dev/null)
            
            if [[ -z "$INSTALLED_EVRS" ]]; then
                REPORT_DATA+="$HOST_NAME|$PKG_NAME_BASE|NOT_INSTALLED|$REQUIRED_EVR\n"
                continue
            fi

            MEETS_REQUIREMENT=0
            OLDEST_DEFICIENT_EVR=""

            while IFS= read -r installed_evr; do
                if [[ -z "$installed_evr" ]]; then continue; fi
                
                # Check if the installed version is numerically lower than the required version
                # Comparison string: installed_evr\nrequired_evr
                FIRST_VERSION=$(echo -e "$installed_evr\n$REQUIRED_EVR" | sort -V | head -n 1)

                if [[ "$FIRST_VERSION" == "$installed_evr" ]] && [[ "$installed_evr" != "$REQUIRED_EVR" ]]; then
                    # Deficient: track the absolute oldest installed version
                    if [[ -z "$OLDEST_DEFICIENT_EVR" ]]; then
                       OLDEST_DEFICIENT_EVR="$installed_evr"
                    else
                        # Compare deficient versions
                        LOWEST_CHECK=$(echo -e "$installed_evr\n$OLDEST_DEFICIENT_EVR" | sort -V | head -n 1)
                        if [[ "$LOWEST_CHECK" == "$installed_evr" ]]; then
                            OLDEST_DEFICIENT_EVR="$installed_evr"
                        fi
                    fi
                else
                    # Compliant: found a version that meets or exceeds the requirement
                    MEETS_REQUIREMENT=1
                    break # Stop processing versions for this base package
                fi
            done <<< "$INSTALLED_EVRS"
            
            # Final Reporting
            if [[ "$MEETS_REQUIREMENT" -eq 0 ]] && [[ -n "$OLDEST_DEFICIENT_EVR" ]]; then
                REPORT_DATA+="$HOST_NAME|$PKG_NAME_BASE|$OLDEST_DEFICIENT_EVR|$REQUIRED_EVR\n"
            fi
        done
        
        echo -e "$REPORT_DATA"
      register: package_check_results
      changed_when: false

    - name: Generate and write a single combined report
      delegate_to: localhost
      run_once: true
      ansible.builtin.copy:
        content: |
          # Package Version Deficiencies Report
          # Generated at: {{ ansible_date_time.iso8601 | regex_replace('\\..*$', '') }}
          # -------------------------------------------------------------
          # HOSTNAME,PACKAGE_NAME,INSTALLED_VERSION,REQUIRED_MINIMUM_VERSION

          {% for host in ansible_play_hosts %}
          {% set raw_stdout = hostvars[host].package_check_results.stdout | default('') %}
          {% set raw_lines = raw_stdout.split('\n') | map('trim') | reject('equalto', '') | list %}
          
          {% for line in raw_lines %}
          {% set parts = line.split('|') %}
          {% if parts | length == 4 %}
          {{ parts[0] | upper }},{{ parts[1] }},{{ parts[2] }},{{ parts[3] }}
          {% endif %}
          {% endfor %}
          {% endfor %}
        dest: "{{ output_file }}"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ primary_group.stdout }}"
        mode: '0644'