- name: Check RHEL package versions
  ignore_unreachable: yes
  hosts: reachable
  become: true
  
  vars_files:
    # Ensure this path is correct relative to your playbook location
    - ../../vaults/vbox_vault.yml 
    
  vars:
    ansible_become_password: "{{ remote_host_become_pass }}"
    ansible_remote_tmp: /var/ansible_tmp
    
    # Pass the entire file content formatted as a newline-separated string (each line: name-version-release)
    required_packages_raw_data: "{{ lookup('file', playbook_dir + '/../../files/package_versions.txt').splitlines() | map('trim') | reject('equalto', '') | join('\n') }}"
    output_file: "{{ playbook_dir }}/../../files/rhel_vulnerability_report.txt"


  tasks:
    - name: Install rpmdevtools for version comparison
      become: true
      ansible.builtin.package:
        name: rpmdevtools
        state: present
      when: ansible_os_family == "RedHat"


    - name: Get primary group for local file permissions
      delegate_to: localhost
      ansible.builtin.shell: 
        cmd: id -gn "{{ lookup('env', 'USER') }}"
      register: primary_group
      changed_when: false

    - name: Execute single-pass, optimized version check (v5 - Robust Name/EVR)
      ansible.builtin.shell: |
        #!/bin/bash
        
        REQUIRED_RAW_DATA="{{ required_packages_raw_data }}"
        HOST_MAJOR_VERSION="{{ ansible_distribution_major_version }}"
        DEBUG_MODE="{{ debug_check | default('false') }}" 
        REPORT_DATA=""
        HOST_NAME="{{ inventory_hostname }}"
        
        # Function to compare RPM versions using rpmdev-vercmp
        compare_rpm_versions() {
            local installed_evr="$1"
            local required_vr="$2"
            
            if command -v rpmdev-vercmp >/dev/null 2>&1; then
                rpmdev-vercmp "$installed_evr" "$required_vr" >/dev/null 2>&1
                local result=$?
                if [[ "$DEBUG_MODE" == "true" ]]; then
                    # Output debug to stderr so it doesn't pollute the report data
                    echo "DEBUG: Compare installed: $installed_evr required: $required_vr -> result: $result" >&2
                fi
                return $result
            else
                # Fallback implementation (omitted)
                return 0
            fi
        }
        
        # Read the raw data line by line
        while IFS= read -r RAW_ENTRY; do
            if [[ -z "$RAW_ENTRY" ]]; then continue; fi
    
            # 1. Robustly split NAME from VERSION-RELEASE using parameter expansion
            # Assumes the V-R is everything after the final hyphen
            
            PKG_NAME_LOOKUP="${RAW_ENTRY%-*}" 
            REQUIRED_VR="${RAW_ENTRY##*-}"
            
            if [[ "$PKG_NAME_LOOKUP" == "$RAW_ENTRY" ]]; then
                # Handle cases where the entry contains no hyphen (e.g., skip malformed lines)
                if [[ "$DEBUG_MODE" == "true" ]]; then
                    echo "DEBUG: Skipping potentially malformed entry: $RAW_ENTRY" >&2
                fi
                continue
            fi
            
            # 2. Filter out packages meant for other major OS versions
            # Note: This step is crucial for entries like 'bpftool-4.18.0-553.69.1.el8_10'
            if [[ "$REQUIRED_VR" =~ \.el([0-9]+) ]]; then
                REQUIRED_OS_VERSION="${BASH_REMATCH[1]}"
                if [[ "$REQUIRED_OS_VERSION" != "$HOST_MAJOR_VERSION" ]]; then
                    continue
                fi
            fi
            
            # 3. Query installed packages, getting the full E:V-R string
            INSTALLED_EVRS=$(rpm -qa "$PKG_NAME_LOOKUP" --queryformat '%{EVR}\n' 2>/dev/null)
            
            if [[ -z "$INSTALLED_EVRS" ]]; then
                if [[ "$DEBUG_MODE" == "true" ]]; then
                    echo "DEBUG: Package not installed or lookup failed for: $PKG_NAME_LOOKUP" >&2
                fi
                continue
            fi
    
            # 4. Check each installed version
            VULNERABLE=0
            while IFS= read -r installed_evr; do
                if [[ -z "$installed_evr" ]]; then continue; fi
                
                compare_rpm_versions "$installed_evr" "$REQUIRED_VR"
                RESULT=$?
                
                # If installed < required (exit code 12), report it
                if [[ $RESULT -eq 12 ]]; then
                    REPORT_DATA+="$HOST_NAME|$PKG_NAME_LOOKUP|$installed_evr|$REQUIRED_VR\n"
                    VULNERABLE=1
                    break # Stop checking this package if one installed version is vulnerable
                fi
            done <<< "$INSTALLED_EVRS"
            
        done <<< "$REQUIRED_RAW_DATA"
        
        echo -e "$REPORT_DATA"
      register: package_check_results
      changed_when: false


    - name: Generate and write a single combined report
      delegate_to: localhost
      run_once: true
      ansible.builtin.copy:
        content: |
          # Package Version Deficiencies Report
          # Generated by Ansible at: {{ ansible_date_time.iso8601 | regex_replace('\\..*$', '') }}
          # -------------------------------------------------------------
          # HOSTNAME,PACKAGE_NAME,INSTALLED_VERSION,REQUIRED_MINIMUM_VERSION

          {% for host in ansible_play_hosts %}
          {% set raw_stdout = hostvars[host].package_check_results.stdout | default('') %}
          {% set raw_lines = raw_stdout.split('\n') | map('trim') | reject('equalto', '') | list %}
          
          {% for line in raw_lines %}
          {% set parts = line.split('|') %}
          {% if parts | length == 4 %}
          {{ parts[0] | upper }},{{ parts[1] }},{{ parts[2] }},{{ parts[3] }}
          {% endif %}
          {% endfor %}
          {% endfor %}
        dest: "{{ output_file }}"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ primary_group.stdout | default(omit) }}"
        mode: '0644'